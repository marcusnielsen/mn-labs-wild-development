{"version":3,"sources":["../../../server/app/index.js"],"names":[],"mappings":";;;;;;;;uBAAoB,SAAS;;;;oBACZ,MAAM;;;;wBACJ,WAAW;;;;sBACX,QAAQ;;;;kBACZ,IAAI;;;;AAEnB,IAAM,GAAG,GAAG,2BAAS,CAAC;AACtB,IAAM,MAAM,GAAG,kBAAK,YAAY,CAAC,GAAG,CAAC,CAAC;AACtC,IAAM,EAAE,GAAG,2BAAO,MAAM,CAAC,CAAC;;AAE1B,GAAG,CAAC,GAAG,CAAC,yBAAO,KAAK,CAAC,CAAC,CAAC;;;AAGvB,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC;AACpC,MAAI,EAAE,KAAK;CACZ,CAAC,CAAC,CAAC;;AAEJ,GAAG,CAAC,GAAG,CAAC,SAAS,EAAE,8BAAc,CAAC,SAAS,GAAG,eAAe,CAAC,CAAC,CAAC;;AAEhE,IAAM,MAAM,GAAG,gBAAG,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,CACxC,YAAY,EAAE,CACd,GAAG,CAAC,UAAC,KAAK,EAAK;AACd,SAAO,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;CAC9B,CAAC,CAAC;;AAEL,IAAM,mBAAmB,GAAG,EAAE,CAAC;;AAE/B,EAAE,CAAC,EAAE,CAAC,YAAY,EAAE,UAAC,MAAM,EAAK;AAC9B,SAAO,CAAC,IAAI,CAAC,oBAAoB,GAAG,MAAM,CAAC,CAAC;;AAE5C,qBAAmB,CAAC,IAAI,CACtB,MAAM,CAAC,SAAS,CAAC,UAAC,GAAG,EAAK;AACxB,UAAM,CAAC,IAAI,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;GAC7B,CAAC,CACH,CAAC;CACH,CAAC,CAAC;;AAEH,SAAS,IAAI,CAAC,IAAI,EAAE;AAClB,QAAM,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,EAAE,SAAS,QAAQ,GAAG;AAClD,WAAO,CAAC,GAAG,CAAC,4BAA4B,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC,CAAC;;AAEpE,QAAI,IAAI,EAAE;AACR,UAAI,CAAC;AACH,cAAM,EAAE,MAAM;AACd,UAAE,EAAE,EAAE;OACP,CAAC,CAAC;KACJ;GACF,CAAC,CAAC;CACJ;;AAED,SAAS,KAAK,GAAG;AACf,QAAM,CAAC,KAAK,EAAE,CAAC;AACf,IAAE,CAAC,KAAK,EAAE,CAAC;AACX,qBAAmB,CAAC,OAAO,CAAC,UAAC,YAAY,EAAK;AAC5C,gBAAY,CAAC,OAAO,EAAE,CAAC;GACxB,CAAC,CAAC;CACJ;;qBAEc;AACb,MAAI,EAAE,IAAI;AACV,OAAK,EAAE,KAAK;CACb","file":"index.js","sourcesContent":["import express from 'express';\nimport http from 'http';\nimport ioInit from 'socket.io';\nimport morgan from 'morgan';\nimport Rx from 'rx';\n\nconst app = express();\nconst server = http.createServer(app);\nconst io = ioInit(server);\n\napp.use(morgan('dev'));\n\n// if(config.liveReload) {\napp.use(require('connect-livereload')({\n  port: 35729,\n}));\n// }\napp.use('/client', express.static(__dirname + '/../../client'));\n\nconst event$ = Rx.Observable.interval(1000)\n  .timeInterval()\n  .map((value) => {\n    return JSON.stringify(value);\n  });\n\nconst event$Subscriptions = [];\n\nio.on('connection', (socket) => {\n  console.info('a user connected: ' + socket);\n\n  event$Subscriptions.push(\n    event$.subscribe((val) => {\n      socket.emit('message', val);\n    })\n  );\n});\n\nfunction init(done) {\n  server.listen(process.env.PORT, function onListen() {\n    console.log('Server listening on port: ' + process.env.PORT + '\\n');\n\n    if (done) {\n      done({\n        server: server,\n        io: io,\n      });\n    }\n  });\n}\n\nfunction close() {\n  server.close();\n  io.close();\n  event$Subscriptions.forEach((subscription) => {\n    subscription.dispose();\n  });\n}\n\nexport default {\n  init: init,\n  close: close,\n};\n"]}